//
// Generated file, do not edit! Created by opp_msgtool 6.0 from src/OspfMessage.msg.
//

#ifndef __OSPFMESSAGE_M_H
#define __OSPFMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class OspfPacket;
class HelloPacket;
class LsaPacket;
// cplusplus {{
#include <vector>
#include <map>
// }}

/**
 * Class generated from <tt>src/OspfMessage.msg:6</tt> by opp_msgtool.
 * <pre>
 * packet OspfPacket
 * {
 *     int type;  // 1: Hello, 2: LSA
 *     int sourceId;
 * }
 * </pre>
 */
class OspfPacket : public ::omnetpp::cPacket
{
  protected:
    int type = 0;
    int sourceId = 0;

  private:
    void copy(const OspfPacket& other);

  protected:
    bool operator==(const OspfPacket&) = delete;

  public:
    OspfPacket(const char *name=nullptr, short kind=0);
    OspfPacket(const OspfPacket& other);
    virtual ~OspfPacket();
    OspfPacket& operator=(const OspfPacket& other);
    virtual OspfPacket *dup() const override {return new OspfPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getType() const;
    virtual void setType(int type);

    virtual int getSourceId() const;
    virtual void setSourceId(int sourceId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const OspfPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, OspfPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>src/OspfMessage.msg:11</tt> by opp_msgtool.
 * <pre>
 * packet HelloPacket extends OspfPacket
 * {
 *     int neighborList[];  // Use int array to represent neighbor list
 * }
 * </pre>
 */
class HelloPacket : public ::OspfPacket
{
  protected:
    int *neighborList = nullptr;
    size_t neighborList_arraysize = 0;

  private:
    void copy(const HelloPacket& other);

  protected:
    bool operator==(const HelloPacket&) = delete;

  public:
    HelloPacket(const char *name=nullptr, short kind=0);
    HelloPacket(const HelloPacket& other);
    virtual ~HelloPacket();
    HelloPacket& operator=(const HelloPacket& other);
    virtual HelloPacket *dup() const override {return new HelloPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual void setNeighborListArraySize(size_t size);
    virtual size_t getNeighborListArraySize() const;
    virtual int getNeighborList(size_t k) const;
    virtual void setNeighborList(size_t k, int neighborList);
    virtual void insertNeighborList(size_t k, int neighborList);
    [[deprecated]] void insertNeighborList(int neighborList) {appendNeighborList(neighborList);}
    virtual void appendNeighborList(int neighborList);
    virtual void eraseNeighborList(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const HelloPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, HelloPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>src/OspfMessage.msg:15</tt> by opp_msgtool.
 * <pre>
 * packet LsaPacket extends OspfPacket
 * {
 *     int originId;
 *     int sequenceNumber;
 *     int linksKeys[];   // Changed from intVector to int[]
 *     int linksValues[]; // Changed from intVector to int[]
 * }
 * </pre>
 */
class LsaPacket : public ::OspfPacket
{
  protected:
    int originId = 0;
    int sequenceNumber = 0;
    int *linksKeys = nullptr;
    size_t linksKeys_arraysize = 0;
    int *linksValues = nullptr;
    size_t linksValues_arraysize = 0;

  private:
    void copy(const LsaPacket& other);

  protected:
    bool operator==(const LsaPacket&) = delete;

  public:
    LsaPacket(const char *name=nullptr, short kind=0);
    LsaPacket(const LsaPacket& other);
    virtual ~LsaPacket();
    LsaPacket& operator=(const LsaPacket& other);
    virtual LsaPacket *dup() const override {return new LsaPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getOriginId() const;
    virtual void setOriginId(int originId);

    virtual int getSequenceNumber() const;
    virtual void setSequenceNumber(int sequenceNumber);

    virtual void setLinksKeysArraySize(size_t size);
    virtual size_t getLinksKeysArraySize() const;
    virtual int getLinksKeys(size_t k) const;
    virtual void setLinksKeys(size_t k, int linksKeys);
    virtual void insertLinksKeys(size_t k, int linksKeys);
    [[deprecated]] void insertLinksKeys(int linksKeys) {appendLinksKeys(linksKeys);}
    virtual void appendLinksKeys(int linksKeys);
    virtual void eraseLinksKeys(size_t k);

    virtual void setLinksValuesArraySize(size_t size);
    virtual size_t getLinksValuesArraySize() const;
    virtual int getLinksValues(size_t k) const;
    virtual void setLinksValues(size_t k, int linksValues);
    virtual void insertLinksValues(size_t k, int linksValues);
    [[deprecated]] void insertLinksValues(int linksValues) {appendLinksValues(linksValues);}
    virtual void appendLinksValues(int linksValues);
    virtual void eraseLinksValues(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const LsaPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, LsaPacket& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline OspfPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<OspfPacket*>(ptr.get<cObject>()); }
template<> inline HelloPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<HelloPacket*>(ptr.get<cObject>()); }
template<> inline LsaPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<LsaPacket*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __OSPFMESSAGE_M_H

